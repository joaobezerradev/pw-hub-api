// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id               String            @id @db.VarChar(36)
  username         String            @unique() @db.VarChar(15)
  password         String            @db.VarChar(100)
  email            String            @unique @db.VarChar(30)
  emailSentAt      DateTime?         @map("email_sent_at")
  emailConfirmedAt DateTime?         @map("email_confirmed_at")
  createdAt        DateTime          @map("created_at")
  updatedAt        DateTime          @map("updated_at")
  deletedAt        DateTime?         @map("deleted_at")
  role             AccountRole       @relation(fields: [roleId], references: [id])
  roleId           String            @map("role_id")
  tokens           AccountToken[]
  profile          AccountProfile[]
  lastAccessAt     DateTime          @map("last_access_at")
  isOnline         Boolean           @map("is_online")
  communities      Community[]
  communityMembers CommunityMember[]

  @@map("account")
}

model AccountRole {
  id        String    @id @db.VarChar(36)
  name      String    @db.VarChar(20)
  isDefault Boolean   @map("is_default")
  createdAt DateTime  @map("created_at")
  updatedAt DateTime  @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  account   Account[]

  @@map("account_role")
}

model AccountProfile {
  id               String         @id @db.VarChar(36)
  name             String         @db.VarChar(80)
  imageBase64      String?        @map("image_base_64") @db.LongText
  coverImageBase64 String?        @map("cover_image_base_64") @db.LongText
  aboutMe          String         @map("about_me") @db.VarChar(300)
  address          String         @db.VarChar(100)
  birthdate        String         @db.VarChar(10)
  phone            String         @db.VarChar(15)
  account          Account        @relation(fields: [accountId], references: [id])
  accountId        String         @map("account_id") @db.VarChar(36)
  createdAt        DateTime       @map("created_at")
  updatedAt        DateTime       @map("updated_at")
  deletedAt        DateTime?      @map("deleted_at")
  profileBadge     ProfileBadge[]

  @@index([accountId])
  @@map("account_profile")
}

model Badge {
  id           String         @id @db.VarChar(36)
  imageBase64  String?        @map("image_base_64") @db.LongText
  name         String         @unique @db.VarChar(100)
  description  String         @db.VarChar(300)
  createdAt    DateTime       @map("created_at")
  updatedAt    DateTime       @map("updated_at")
  deletedAt    DateTime?      @map("deleted_at")
  profileBadge ProfileBadge[]

  @@map("badge")
}

model ProfileBadge {
  id               String         @id @db.VarChar(36)
  accountProfileId String         @map("account_profile_id") @db.VarChar(36)
  badgeId          String         @map("badge_id") @db.VarChar(36)
  profile          AccountProfile @relation(fields: [accountProfileId], references: [id])
  badge            Badge          @relation(fields: [badgeId], references: [id])
  createdAt        DateTime       @map("created_at")
  updatedAt        DateTime       @map("updated_at")
  deletedAt        DateTime?      @map("deleted_at")

  @@map("profile_badge")
}

model AccountToken {
  id        String           @id @db.VarChar(36)
  code      String           @db.VarChar(100)
  expiresAt DateTime         @map("expires_at")
  account   Account          @relation(fields: [accountId], references: [id])
  accountId String           @map("account_id") @db.VarChar(36)
  createdAt DateTime         @map("created_at")
  updatedAt DateTime         @map("updated_at")
  deletedAt DateTime?        @map("deleted_at")
  type      AccountTokenType @relation(fields: [typeId], references: [id])
  typeId    String           @map("account_token_type_id") @db.VarChar(36)

  @@index([code, accountId, typeId])
  @@map("account_token")
}

model AccountTokenType {
  id           String         @id @db.VarChar(36)
  name         String         @db.VarChar(80)
  createdAt    DateTime       @map("created_at")
  updatedAt    DateTime       @map("updated_at")
  deletedAt    DateTime?      @map("deleted_at")
  AccountToken AccountToken[]

  @@map("account_token_type")
}

model Community {
  id               String            @id @db.VarChar(36)
  name             String            @unique @db.VarChar(100)
  description      String            @db.VarChar(300)
  imageBase64      String?           @map("image_base_64") @db.LongText
  coverImageBase64 String?           @map("cover_image_base_64") @db.LongText
  account          Account           @relation(fields: [accountId], references: [id])
  accountId        String            @db.VarChar(36)
  createdAt        DateTime          @map("created_at")
  updatedAt        DateTime          @map("updated_at")
  deletedAt        DateTime?         @map("deleted_at")
  members          CommunityMember[]

  @@index([accountId])
  @@map("community")
}

model CommunityRole {
  id        String            @id @db.VarChar(36)
  name      String            @db.VarChar(20)
  createdAt DateTime          @map("created_at")
  updatedAt DateTime          @map("updated_at")
  deletedAt DateTime?         @map("deleted_at")
  members   CommunityMember[]

  @@map("community_role")
}

model CommunityMember {
  id              String          @id @db.VarChar(36)
  community       Community       @relation(fields: [communityId], references: [id])
  communityId     String          @map("community_id") @db.VarChar(36)
  account         Account         @relation(fields: [accountId], references: [id])
  accountId       String          @map("account_id") @db.VarChar(36)
  createdAt       DateTime        @map("created_at")
  updatedAt       DateTime        @map("updated_at")
  deletedAt       DateTime?       @map("deleted_at")
  role            CommunityRole   @relation(fields: [communityRoleId], references: [id])
  posts           CommunityPost[]
  communityRoleId String          @map("community_role_id") @db.VarChar(36)

  @@index([communityId])
  @@index([accountId])
  @@map("community_member")
}

model CommunityPost {
  id                String          @id @db.VarChar(36)
  communityMemberId String          @map("community_member_id") @db.VarChar(36)
  member            CommunityMember @relation(fields: [communityMemberId], references: [id])
  title             String          @db.VarChar(100)
  content           String          @db.VarChar(500)
  createdAt         DateTime        @map("created_at")
  updatedAt         DateTime        @map("updated_at")
  deletedAt         DateTime?       @map("deleted_at")

  @@map("community_post")
}
